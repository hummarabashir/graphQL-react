{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { ApolloError } from 'apollo-client';\nimport { useContext, useEffect, useMemo, useState } from 'react';\nimport { useApolloClient } from './ApolloContext';\nimport { SSRContext } from './internal/SSRContext';\nimport actHack from './internal/actHack';\nimport { getCachedObservableQuery, invalidateCachedObservableQuery } from './queryCache';\nimport { compact, objToKey } from './utils';\nexport function useQuery(query, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n    _ref$ssr = _ref.ssr,\n    ssr = _ref$ssr === void 0 ? true : _ref$ssr,\n    _ref$skip = _ref.skip,\n    skip = _ref$skip === void 0 ? false : _ref$skip,\n    _ref$suspend = _ref.suspend,\n    suspend = _ref$suspend === void 0 ? false : _ref$suspend,\n    pollInterval = _ref.pollInterval,\n    _ref$notifyOnNetworkS = _ref.notifyOnNetworkStatusChange,\n    notifyOnNetworkStatusChange = _ref$notifyOnNetworkS === void 0 ? false : _ref$notifyOnNetworkS,\n    overrideClient = _ref.client,\n    context = _ref.context,\n    metadata = _ref.metadata,\n    variables = _ref.variables,\n    actualCachePolicy = _ref.fetchPolicy,\n    errorPolicy = _ref.errorPolicy,\n    fetchResults = _ref.fetchResults;\n  var client = useApolloClient(overrideClient);\n  var ssrManager = useContext(SSRContext);\n  var ssrInUse = ssr && ssrManager; // Skips when `skip: true` or SSRContext passed but `ssr: false`\n\n  var shouldSkip = skip || ssrManager != null && !ssr;\n  var fetchPolicy = ssrInUse && (\n  // Taken from https://github.com/apollographql/react-apollo/blob/2d7e48b7d0c26e792e1ed26e98bb84d8fba5bb8a/src/Query.tsx#L167-L169\n  actualCachePolicy === 'network-only' || actualCachePolicy === 'cache-and-network') ? 'cache-first' : actualCachePolicy;\n  var watchQueryOptions = useMemo(function () {\n    return compact({\n      context: context,\n      errorPolicy: errorPolicy,\n      fetchPolicy: fetchPolicy,\n      fetchResults: fetchResults,\n      metadata: metadata,\n      notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n      pollInterval: pollInterval,\n      query: query,\n      variables: variables\n    });\n  }, [query, pollInterval, notifyOnNetworkStatusChange, context && objToKey(context), metadata && objToKey(metadata), variables && objToKey(variables), fetchPolicy, errorPolicy, fetchResults]);\n  var observableQuery = useMemo(function () {\n    return getCachedObservableQuery(client, watchQueryOptions);\n  }, [client, watchQueryOptions]);\n  var _useState = useState(0),\n    responseId = _useState[0],\n    setResponseId = _useState[1];\n  var currentResult = useMemo(function () {\n    var helpers = {\n      fetchMore: observableQuery.fetchMore.bind(observableQuery),\n      refetch: observableQuery.refetch.bind(observableQuery),\n      startPolling: observableQuery.startPolling.bind(observableQuery),\n      stopPolling: observableQuery.stopPolling.bind(observableQuery),\n      updateQuery: observableQuery.updateQuery.bind(observableQuery)\n    };\n    var result = observableQuery.getCurrentResult(); // return the old result data when there is an error\n\n    var data = result.data;\n    if (result.error || result.errors) {\n      data = _extends({}, result.data, {}, (observableQuery.getLastResult() || {}).data);\n    }\n    if (shouldSkip) {\n      // Taken from https://github.com/apollographql/react-apollo/blob/5cb63b3625ce5e4a3d3e4ba132eaec2a38ef5d90/src/Query.tsx#L376-L381\n      return _extends({}, helpers, {\n        data: undefined,\n        error: undefined,\n        loading: false,\n        networkStatus: undefined\n      });\n    }\n    return _extends({}, helpers, {\n      data: data,\n      error: result.errors && result.errors.length > 0 ? new ApolloError({\n        graphQLErrors: result.errors\n      }) : result.error,\n      errors: result.errors,\n      loading: result.loading,\n      // don't try to return `networkStatus` when suspense it's used\n      // because it's unreliable in that case\n      // https://github.com/trojanowski/react-apollo-hooks/pull/68\n      networkStatus: suspend ? undefined : result.networkStatus,\n      partial: result.partial,\n      stale: result.stale\n    });\n  }, [shouldSkip, responseId, observableQuery]);\n  useEffect(function () {\n    if (shouldSkip) {\n      return;\n    }\n    var invalidateCurrentResult = function invalidateCurrentResult() {\n      // A hack to get rid React warnings during tests. The default\n      // implementation of `actHack` just invokes the callback immediately.\n      // In tests, it's replaced with `act` from react-testing-library.\n      // A better solution welcome.\n      actHack(function () {\n        setResponseId(function (x) {\n          return x + 1;\n        });\n      });\n    };\n    var subscription = observableQuery.subscribe(invalidateCurrentResult, invalidateCurrentResult);\n    invalidateCachedObservableQuery(client, watchQueryOptions);\n    return function () {\n      subscription.unsubscribe();\n    };\n  }, [shouldSkip, observableQuery]);\n  ensureSupportedFetchPolicy(suspend, fetchPolicy);\n  if (currentResult.partial) {\n    if (suspend) {\n      // throw a promise - use the react suspense to wait until the data is\n      // available\n      throw observableQuery.result();\n    }\n    if (ssrInUse) {\n      ssrManager.register(observableQuery.result());\n    }\n  }\n  return currentResult;\n}\nfunction ensureSupportedFetchPolicy(suspend, fetchPolicy) {\n  if (suspend && fetchPolicy && fetchPolicy !== 'cache-first') {\n    throw new Error(\"Fetch policy \" + fetchPolicy + \" is not supported without 'suspend: false'\");\n  }\n}","map":{"version":3,"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","ApolloError","useContext","useEffect","useMemo","useState","useApolloClient","SSRContext","actHack","getCachedObservableQuery","invalidateCachedObservableQuery","compact","objToKey","useQuery","query","_temp","_ref","_ref$ssr","ssr","_ref$skip","skip","_ref$suspend","suspend","pollInterval","_ref$notifyOnNetworkS","notifyOnNetworkStatusChange","overrideClient","client","context","metadata","variables","actualCachePolicy","fetchPolicy","errorPolicy","fetchResults","ssrManager","ssrInUse","shouldSkip","watchQueryOptions","observableQuery","_useState","responseId","setResponseId","currentResult","helpers","fetchMore","bind","refetch","startPolling","stopPolling","updateQuery","result","getCurrentResult","data","error","errors","getLastResult","undefined","loading","networkStatus","graphQLErrors","partial","stale","invalidateCurrentResult","x","subscription","subscribe","unsubscribe","ensureSupportedFetchPolicy","register","Error"],"sources":["/Users/hummarabashir/Desktop/graphql-react-explorer/node_modules/react-apollo-hooks/es/useQuery.js"],"sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { ApolloError } from 'apollo-client';\nimport { useContext, useEffect, useMemo, useState } from 'react';\nimport { useApolloClient } from './ApolloContext';\nimport { SSRContext } from './internal/SSRContext';\nimport actHack from './internal/actHack';\nimport { getCachedObservableQuery, invalidateCachedObservableQuery } from './queryCache';\nimport { compact, objToKey } from './utils';\nexport function useQuery(query, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr,\n      _ref$skip = _ref.skip,\n      skip = _ref$skip === void 0 ? false : _ref$skip,\n      _ref$suspend = _ref.suspend,\n      suspend = _ref$suspend === void 0 ? false : _ref$suspend,\n      pollInterval = _ref.pollInterval,\n      _ref$notifyOnNetworkS = _ref.notifyOnNetworkStatusChange,\n      notifyOnNetworkStatusChange = _ref$notifyOnNetworkS === void 0 ? false : _ref$notifyOnNetworkS,\n      overrideClient = _ref.client,\n      context = _ref.context,\n      metadata = _ref.metadata,\n      variables = _ref.variables,\n      actualCachePolicy = _ref.fetchPolicy,\n      errorPolicy = _ref.errorPolicy,\n      fetchResults = _ref.fetchResults;\n\n  var client = useApolloClient(overrideClient);\n  var ssrManager = useContext(SSRContext);\n  var ssrInUse = ssr && ssrManager; // Skips when `skip: true` or SSRContext passed but `ssr: false`\n\n  var shouldSkip = skip || ssrManager != null && !ssr;\n  var fetchPolicy = ssrInUse && ( // Taken from https://github.com/apollographql/react-apollo/blob/2d7e48b7d0c26e792e1ed26e98bb84d8fba5bb8a/src/Query.tsx#L167-L169\n  actualCachePolicy === 'network-only' || actualCachePolicy === 'cache-and-network') ? 'cache-first' : actualCachePolicy;\n  var watchQueryOptions = useMemo(function () {\n    return compact({\n      context: context,\n      errorPolicy: errorPolicy,\n      fetchPolicy: fetchPolicy,\n      fetchResults: fetchResults,\n      metadata: metadata,\n      notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n      pollInterval: pollInterval,\n      query: query,\n      variables: variables\n    });\n  }, [query, pollInterval, notifyOnNetworkStatusChange, context && objToKey(context), metadata && objToKey(metadata), variables && objToKey(variables), fetchPolicy, errorPolicy, fetchResults]);\n  var observableQuery = useMemo(function () {\n    return getCachedObservableQuery(client, watchQueryOptions);\n  }, [client, watchQueryOptions]);\n\n  var _useState = useState(0),\n      responseId = _useState[0],\n      setResponseId = _useState[1];\n\n  var currentResult = useMemo(function () {\n    var helpers = {\n      fetchMore: observableQuery.fetchMore.bind(observableQuery),\n      refetch: observableQuery.refetch.bind(observableQuery),\n      startPolling: observableQuery.startPolling.bind(observableQuery),\n      stopPolling: observableQuery.stopPolling.bind(observableQuery),\n      updateQuery: observableQuery.updateQuery.bind(observableQuery)\n    };\n    var result = observableQuery.getCurrentResult(); // return the old result data when there is an error\n\n    var data = result.data;\n\n    if (result.error || result.errors) {\n      data = _extends({}, result.data, {}, (observableQuery.getLastResult() || {}).data);\n    }\n\n    if (shouldSkip) {\n      // Taken from https://github.com/apollographql/react-apollo/blob/5cb63b3625ce5e4a3d3e4ba132eaec2a38ef5d90/src/Query.tsx#L376-L381\n      return _extends({}, helpers, {\n        data: undefined,\n        error: undefined,\n        loading: false,\n        networkStatus: undefined\n      });\n    }\n\n    return _extends({}, helpers, {\n      data: data,\n      error: result.errors && result.errors.length > 0 ? new ApolloError({\n        graphQLErrors: result.errors\n      }) : result.error,\n      errors: result.errors,\n      loading: result.loading,\n      // don't try to return `networkStatus` when suspense it's used\n      // because it's unreliable in that case\n      // https://github.com/trojanowski/react-apollo-hooks/pull/68\n      networkStatus: suspend ? undefined : result.networkStatus,\n      partial: result.partial,\n      stale: result.stale\n    });\n  }, [shouldSkip, responseId, observableQuery]);\n  useEffect(function () {\n    if (shouldSkip) {\n      return;\n    }\n\n    var invalidateCurrentResult = function invalidateCurrentResult() {\n      // A hack to get rid React warnings during tests. The default\n      // implementation of `actHack` just invokes the callback immediately.\n      // In tests, it's replaced with `act` from react-testing-library.\n      // A better solution welcome.\n      actHack(function () {\n        setResponseId(function (x) {\n          return x + 1;\n        });\n      });\n    };\n\n    var subscription = observableQuery.subscribe(invalidateCurrentResult, invalidateCurrentResult);\n    invalidateCachedObservableQuery(client, watchQueryOptions);\n    return function () {\n      subscription.unsubscribe();\n    };\n  }, [shouldSkip, observableQuery]);\n  ensureSupportedFetchPolicy(suspend, fetchPolicy);\n\n  if (currentResult.partial) {\n    if (suspend) {\n      // throw a promise - use the react suspense to wait until the data is\n      // available\n      throw observableQuery.result();\n    }\n\n    if (ssrInUse) {\n      ssrManager.register(observableQuery.result());\n    }\n  }\n\n  return currentResult;\n}\n\nfunction ensureSupportedFetchPolicy(suspend, fetchPolicy) {\n  if (suspend && fetchPolicy && fetchPolicy !== 'cache-first') {\n    throw new Error(\"Fetch policy \" + fetchPolicy + \" is not supported without 'suspend: false'\");\n  }\n}"],"mappings":"AAAA,SAASA,QAAQA,CAAA,EAAG;EAAEA,QAAQ,GAAGC,MAAM,CAACC,MAAM,IAAI,UAAUC,MAAM,EAAE;IAAE,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,SAAS,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;MAAE,IAAIG,MAAM,GAAGF,SAAS,CAACD,CAAC,CAAC;MAAE,KAAK,IAAII,GAAG,IAAID,MAAM,EAAE;QAAE,IAAIN,MAAM,CAACQ,SAAS,CAACC,cAAc,CAACC,IAAI,CAACJ,MAAM,EAAEC,GAAG,CAAC,EAAE;UAAEL,MAAM,CAACK,GAAG,CAAC,GAAGD,MAAM,CAACC,GAAG,CAAC;QAAE;MAAE;IAAE;IAAE,OAAOL,MAAM;EAAE,CAAC;EAAE,OAAOH,QAAQ,CAACY,KAAK,CAAC,IAAI,EAAEP,SAAS,CAAC;AAAE;AAE5T,SAASQ,WAAW,QAAQ,eAAe;AAC3C,SAASC,UAAU,EAAEC,SAAS,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AAChE,SAASC,eAAe,QAAQ,iBAAiB;AACjD,SAASC,UAAU,QAAQ,uBAAuB;AAClD,OAAOC,OAAO,MAAM,oBAAoB;AACxC,SAASC,wBAAwB,EAAEC,+BAA+B,QAAQ,cAAc;AACxF,SAASC,OAAO,EAAEC,QAAQ,QAAQ,SAAS;AAC3C,OAAO,SAASC,QAAQA,CAACC,KAAK,EAAEC,KAAK,EAAE;EACrC,IAAIC,IAAI,GAAGD,KAAK,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,GAAGA,KAAK;IACpCE,QAAQ,GAAGD,IAAI,CAACE,GAAG;IACnBA,GAAG,GAAGD,QAAQ,KAAK,KAAK,CAAC,GAAG,IAAI,GAAGA,QAAQ;IAC3CE,SAAS,GAAGH,IAAI,CAACI,IAAI;IACrBA,IAAI,GAAGD,SAAS,KAAK,KAAK,CAAC,GAAG,KAAK,GAAGA,SAAS;IAC/CE,YAAY,GAAGL,IAAI,CAACM,OAAO;IAC3BA,OAAO,GAAGD,YAAY,KAAK,KAAK,CAAC,GAAG,KAAK,GAAGA,YAAY;IACxDE,YAAY,GAAGP,IAAI,CAACO,YAAY;IAChCC,qBAAqB,GAAGR,IAAI,CAACS,2BAA2B;IACxDA,2BAA2B,GAAGD,qBAAqB,KAAK,KAAK,CAAC,GAAG,KAAK,GAAGA,qBAAqB;IAC9FE,cAAc,GAAGV,IAAI,CAACW,MAAM;IAC5BC,OAAO,GAAGZ,IAAI,CAACY,OAAO;IACtBC,QAAQ,GAAGb,IAAI,CAACa,QAAQ;IACxBC,SAAS,GAAGd,IAAI,CAACc,SAAS;IAC1BC,iBAAiB,GAAGf,IAAI,CAACgB,WAAW;IACpCC,WAAW,GAAGjB,IAAI,CAACiB,WAAW;IAC9BC,YAAY,GAAGlB,IAAI,CAACkB,YAAY;EAEpC,IAAIP,MAAM,GAAGrB,eAAe,CAACoB,cAAc,CAAC;EAC5C,IAAIS,UAAU,GAAGjC,UAAU,CAACK,UAAU,CAAC;EACvC,IAAI6B,QAAQ,GAAGlB,GAAG,IAAIiB,UAAU,CAAC,CAAC;;EAElC,IAAIE,UAAU,GAAGjB,IAAI,IAAIe,UAAU,IAAI,IAAI,IAAI,CAACjB,GAAG;EACnD,IAAIc,WAAW,GAAGI,QAAQ;EAAM;EAChCL,iBAAiB,KAAK,cAAc,IAAIA,iBAAiB,KAAK,mBAAmB,CAAC,GAAG,aAAa,GAAGA,iBAAiB;EACtH,IAAIO,iBAAiB,GAAGlC,OAAO,CAAC,YAAY;IAC1C,OAAOO,OAAO,CAAC;MACbiB,OAAO,EAAEA,OAAO;MAChBK,WAAW,EAAEA,WAAW;MACxBD,WAAW,EAAEA,WAAW;MACxBE,YAAY,EAAEA,YAAY;MAC1BL,QAAQ,EAAEA,QAAQ;MAClBJ,2BAA2B,EAAEA,2BAA2B;MACxDF,YAAY,EAAEA,YAAY;MAC1BT,KAAK,EAAEA,KAAK;MACZgB,SAAS,EAAEA;IACb,CAAC,CAAC;EACJ,CAAC,EAAE,CAAChB,KAAK,EAAES,YAAY,EAAEE,2BAA2B,EAAEG,OAAO,IAAIhB,QAAQ,CAACgB,OAAO,CAAC,EAAEC,QAAQ,IAAIjB,QAAQ,CAACiB,QAAQ,CAAC,EAAEC,SAAS,IAAIlB,QAAQ,CAACkB,SAAS,CAAC,EAAEE,WAAW,EAAEC,WAAW,EAAEC,YAAY,CAAC,CAAC;EAC9L,IAAIK,eAAe,GAAGnC,OAAO,CAAC,YAAY;IACxC,OAAOK,wBAAwB,CAACkB,MAAM,EAAEW,iBAAiB,CAAC;EAC5D,CAAC,EAAE,CAACX,MAAM,EAAEW,iBAAiB,CAAC,CAAC;EAE/B,IAAIE,SAAS,GAAGnC,QAAQ,CAAC,CAAC,CAAC;IACvBoC,UAAU,GAAGD,SAAS,CAAC,CAAC,CAAC;IACzBE,aAAa,GAAGF,SAAS,CAAC,CAAC,CAAC;EAEhC,IAAIG,aAAa,GAAGvC,OAAO,CAAC,YAAY;IACtC,IAAIwC,OAAO,GAAG;MACZC,SAAS,EAAEN,eAAe,CAACM,SAAS,CAACC,IAAI,CAACP,eAAe,CAAC;MAC1DQ,OAAO,EAAER,eAAe,CAACQ,OAAO,CAACD,IAAI,CAACP,eAAe,CAAC;MACtDS,YAAY,EAAET,eAAe,CAACS,YAAY,CAACF,IAAI,CAACP,eAAe,CAAC;MAChEU,WAAW,EAAEV,eAAe,CAACU,WAAW,CAACH,IAAI,CAACP,eAAe,CAAC;MAC9DW,WAAW,EAAEX,eAAe,CAACW,WAAW,CAACJ,IAAI,CAACP,eAAe;IAC/D,CAAC;IACD,IAAIY,MAAM,GAAGZ,eAAe,CAACa,gBAAgB,CAAC,CAAC,CAAC,CAAC;;IAEjD,IAAIC,IAAI,GAAGF,MAAM,CAACE,IAAI;IAEtB,IAAIF,MAAM,CAACG,KAAK,IAAIH,MAAM,CAACI,MAAM,EAAE;MACjCF,IAAI,GAAGjE,QAAQ,CAAC,CAAC,CAAC,EAAE+D,MAAM,CAACE,IAAI,EAAE,CAAC,CAAC,EAAE,CAACd,eAAe,CAACiB,aAAa,CAAC,CAAC,IAAI,CAAC,CAAC,EAAEH,IAAI,CAAC;IACpF;IAEA,IAAIhB,UAAU,EAAE;MACd;MACA,OAAOjD,QAAQ,CAAC,CAAC,CAAC,EAAEwD,OAAO,EAAE;QAC3BS,IAAI,EAAEI,SAAS;QACfH,KAAK,EAAEG,SAAS;QAChBC,OAAO,EAAE,KAAK;QACdC,aAAa,EAAEF;MACjB,CAAC,CAAC;IACJ;IAEA,OAAOrE,QAAQ,CAAC,CAAC,CAAC,EAAEwD,OAAO,EAAE;MAC3BS,IAAI,EAAEA,IAAI;MACVC,KAAK,EAAEH,MAAM,CAACI,MAAM,IAAIJ,MAAM,CAACI,MAAM,CAAC7D,MAAM,GAAG,CAAC,GAAG,IAAIO,WAAW,CAAC;QACjE2D,aAAa,EAAET,MAAM,CAACI;MACxB,CAAC,CAAC,GAAGJ,MAAM,CAACG,KAAK;MACjBC,MAAM,EAAEJ,MAAM,CAACI,MAAM;MACrBG,OAAO,EAAEP,MAAM,CAACO,OAAO;MACvB;MACA;MACA;MACAC,aAAa,EAAErC,OAAO,GAAGmC,SAAS,GAAGN,MAAM,CAACQ,aAAa;MACzDE,OAAO,EAAEV,MAAM,CAACU,OAAO;MACvBC,KAAK,EAAEX,MAAM,CAACW;IAChB,CAAC,CAAC;EACJ,CAAC,EAAE,CAACzB,UAAU,EAAEI,UAAU,EAAEF,eAAe,CAAC,CAAC;EAC7CpC,SAAS,CAAC,YAAY;IACpB,IAAIkC,UAAU,EAAE;MACd;IACF;IAEA,IAAI0B,uBAAuB,GAAG,SAASA,uBAAuBA,CAAA,EAAG;MAC/D;MACA;MACA;MACA;MACAvD,OAAO,CAAC,YAAY;QAClBkC,aAAa,CAAC,UAAUsB,CAAC,EAAE;UACzB,OAAOA,CAAC,GAAG,CAAC;QACd,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IAED,IAAIC,YAAY,GAAG1B,eAAe,CAAC2B,SAAS,CAACH,uBAAuB,EAAEA,uBAAuB,CAAC;IAC9FrD,+BAA+B,CAACiB,MAAM,EAAEW,iBAAiB,CAAC;IAC1D,OAAO,YAAY;MACjB2B,YAAY,CAACE,WAAW,CAAC,CAAC;IAC5B,CAAC;EACH,CAAC,EAAE,CAAC9B,UAAU,EAAEE,eAAe,CAAC,CAAC;EACjC6B,0BAA0B,CAAC9C,OAAO,EAAEU,WAAW,CAAC;EAEhD,IAAIW,aAAa,CAACkB,OAAO,EAAE;IACzB,IAAIvC,OAAO,EAAE;MACX;MACA;MACA,MAAMiB,eAAe,CAACY,MAAM,CAAC,CAAC;IAChC;IAEA,IAAIf,QAAQ,EAAE;MACZD,UAAU,CAACkC,QAAQ,CAAC9B,eAAe,CAACY,MAAM,CAAC,CAAC,CAAC;IAC/C;EACF;EAEA,OAAOR,aAAa;AACtB;AAEA,SAASyB,0BAA0BA,CAAC9C,OAAO,EAAEU,WAAW,EAAE;EACxD,IAAIV,OAAO,IAAIU,WAAW,IAAIA,WAAW,KAAK,aAAa,EAAE;IAC3D,MAAM,IAAIsC,KAAK,CAAC,eAAe,GAAGtC,WAAW,GAAG,4CAA4C,CAAC;EAC/F;AACF"},"metadata":{},"sourceType":"module"}