{"ast":null,"code":"var _jsxFileName = \"/Users/hummarabashir/Desktop/national-park/frontend/src/index.js\";\n// import React from \"react\";\n// import ReactDOM from \"react-dom\";\n// import { ApolloProvider } from \"@apollo/client\";\n// import { ApolloClient, InMemoryCache } from \"@apollo/client\";\n// import \"typeface-roboto\";\n// import App from \"./App\";\n\n// const client = new ApolloClient({ uri: \"http://localhost:4000\" });\n\n// ReactDOM.render(\n//   <ApolloProvider client={client}>\n//     <App />\n//   </ApolloProvider>,\n\n//   document.getElementById(\"root\")\n// );\n\n// function ClientApp() {\n//   return (\n//     <ApolloProvider client={client}>\n//       <App />\n//     </ApolloProvider>\n//   );\n// }\n\n// export default ClientApp;\n\n// import React from \"react\";\n// import { ApolloProvider } from \"@apollo/client\";\n// import { ApolloClient, InMemoryCache } from \"@apollo/client\";\n// import App from \"./App.js\";\n\n// const client = new ApolloClient({\n//   uri: \"http://localhost:4000/graphql\",\n//   cache: new InMemoryCache(),\n// });\n\n// const CApp = () => {\n//   return (\n//     <ApolloProvider client={client}>\n//       <App />\n//     </ApolloProvider>\n//   );\n// };\n\n// export default CApp;\n\n// npm install @apollo/client\n// npm start\n\nimport React from \"react\";\nimport { ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql } from \"@apollo/client\";\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000/graphql\",\n  // Replace with your GraphQL server URL\n  cache: new InMemoryCache()\n});\nconst GET_STATE_DATA = gql`\n  query GetStateData {\n    usaMapData {\n      id\n      name\n    }\n  }\n`;\nfunction CApp() {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_STATE_DATA);\n  if (loading) return React.createElement(\"p\", null, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }, \"Error: \", error.message);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, \"Users\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, data.usaMapData.map(user => /*#__PURE__*/React.createElement(\"li\", {\n    key: user.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, \"Name: \", user.name)))));\n}\nfunction Root() {\n  return /*#__PURE__*/React.createElement(ApolloProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CApp, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }));\n}\nexport default Root;","map":{"version":3,"names":["React","ApolloClient","InMemoryCache","ApolloProvider","useQuery","gql","client","uri","cache","GET_STATE_DATA","CApp","loading","error","data","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","message","usaMapData","map","user","key","id","name","Root"],"sources":["/Users/hummarabashir/Desktop/national-park/frontend/src/index.js"],"sourcesContent":["// import React from \"react\";\n// import ReactDOM from \"react-dom\";\n// import { ApolloProvider } from \"@apollo/client\";\n// import { ApolloClient, InMemoryCache } from \"@apollo/client\";\n// import \"typeface-roboto\";\n// import App from \"./App\";\n\n// const client = new ApolloClient({ uri: \"http://localhost:4000\" });\n\n// ReactDOM.render(\n//   <ApolloProvider client={client}>\n//     <App />\n//   </ApolloProvider>,\n\n//   document.getElementById(\"root\")\n// );\n\n// function ClientApp() {\n//   return (\n//     <ApolloProvider client={client}>\n//       <App />\n//     </ApolloProvider>\n//   );\n// }\n\n// export default ClientApp;\n\n// import React from \"react\";\n// import { ApolloProvider } from \"@apollo/client\";\n// import { ApolloClient, InMemoryCache } from \"@apollo/client\";\n// import App from \"./App.js\";\n\n// const client = new ApolloClient({\n//   uri: \"http://localhost:4000/graphql\",\n//   cache: new InMemoryCache(),\n// });\n\n// const CApp = () => {\n//   return (\n//     <ApolloProvider client={client}>\n//       <App />\n//     </ApolloProvider>\n//   );\n// };\n\n// export default CApp;\n\n// npm install @apollo/client\n// npm start\n\nimport React from \"react\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  useQuery,\n  gql,\n} from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000/graphql\", // Replace with your GraphQL server URL\n  cache: new InMemoryCache(),\n});\n\nconst GET_STATE_DATA = gql`\n  query GetStateData {\n    usaMapData {\n      id\n      name\n    }\n  }\n`;\n\nfunction CApp() {\n  const { loading, error, data } = useQuery(GET_STATE_DATA);\n\n  if (loading) return React.createElement(\"p\", null, \"Loading...\");\n\n  if (error) return <p>Error: {error.message}</p>;\n\n  return (\n    <div>\n      <h1>Users</h1>\n      <ul>\n        {data.usaMapData.map((user) => (\n          <li key={user.id}>\n            <p>Name: {user.name}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nfunction Root() {\n  return (\n    <ApolloProvider client={client}>\n      <CApp />\n    </ApolloProvider>\n  );\n}\n\nexport default Root;\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SACEC,YAAY,EACZC,aAAa,EACbC,cAAc,EACdC,QAAQ,EACRC,GAAG,QACE,gBAAgB;AAEvB,MAAMC,MAAM,GAAG,IAAIL,YAAY,CAAC;EAC9BM,GAAG,EAAE,+BAA+B;EAAE;EACtCC,KAAK,EAAE,IAAIN,aAAa,CAAC;AAC3B,CAAC,CAAC;AAEF,MAAMO,cAAc,GAAGJ,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,SAASK,IAAIA,CAAA,EAAG;EACd,MAAM;IAAEC,OAAO;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAGT,QAAQ,CAACK,cAAc,CAAC;EAEzD,IAAIE,OAAO,EAAE,OAAOX,KAAK,CAACc,aAAa,CAAC,GAAG,EAAE,IAAI,EAAE,YAAY,CAAC;EAEhE,IAAIF,KAAK,EAAE,oBAAOZ,KAAA,CAAAc,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAG,SAAO,EAACR,KAAK,CAACS,OAAW,CAAC;EAE/C,oBACErB,KAAA,CAAAc,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACEpB,KAAA,CAAAc,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAI,OAAS,CAAC,eACdpB,KAAA,CAAAc,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACGP,IAAI,CAACS,UAAU,CAACC,GAAG,CAAEC,IAAI,iBACxBxB,KAAA,CAAAc,aAAA;IAAIW,GAAG,EAAED,IAAI,CAACE,EAAG;IAAAX,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACfpB,KAAA,CAAAc,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAG,QAAM,EAACI,IAAI,CAACG,IAAQ,CACrB,CACL,CACC,CACD,CAAC;AAEV;AAEA,SAASC,IAAIA,CAAA,EAAG;EACd,oBACE5B,KAAA,CAAAc,aAAA,CAACX,cAAc;IAACG,MAAM,EAAEA,MAAO;IAAAS,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC7BpB,KAAA,CAAAc,aAAA,CAACJ,IAAI;IAAAK,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CACO,CAAC;AAErB;AAEA,eAAeQ,IAAI"},"metadata":{},"sourceType":"module"}