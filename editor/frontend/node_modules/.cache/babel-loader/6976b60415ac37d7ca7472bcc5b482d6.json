{"ast":null,"code":"var _jsxFileName = \"/Users/hummarabashir/Desktop/national-park/frontend/src/index.js\";\n// import React from \"react\";\n// import ReactDOM from \"react-dom\";\n// import { ApolloProvider } from \"@apollo/client\";\n// import { ApolloClient, InMemoryCache } from \"@apollo/client\";\n// import \"typeface-roboto\";\n// import App from \"./App\";\n\n// const client = new ApolloClient({ uri: \"http://localhost:4000\" });\n\n// ReactDOM.render(\n//   <ApolloProvider client={client}>\n//     <App />\n//   </ApolloProvider>,\n\n//   document.getElementById(\"root\")\n// );\n\n// function ClientApp() {\n//   return (\n//     <ApolloProvider client={client}>\n//       <App />\n//     </ApolloProvider>\n//   );\n// }\n\n// export default ClientApp;\n\nimport React from \"react\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport { ApolloClient, InMemoryCache } from \"@apollo/client\";\nimport App from \"./App.js\";\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000/graphql\",\n  cache: new InMemoryCache()\n});\nconst CApp = () => {\n  return /*#__PURE__*/React.createElement(ApolloProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, \"hello\"));\n};\nexport default CApp;\n\n// npm install @apollo/client\n// npm start\n\n// import React from \"react\";\n// import {\n//   ApolloClient,\n//   InMemoryCache,\n//   ApolloProvider,\n//   useQuery,\n//   gql,\n// } from \"@apollo/client\";\n\n// const client = new ApolloClient({\n//   uri: \"http://localhost:4000/graphql\", // Replace with your GraphQL server URL\n//   cache: new InMemoryCache(),\n// });\n\n// const GET_STATE_DATA = gql`\n//   query GetStateData {\n//     usaMapData {\n//       id\n//       name\n//     }\n//   }\n// `;\n\n// function CApp() {\n//   const { loading, error, data } = useQuery(GET_STATE_DATA);\n\n//   if (loading) return React.createElement(\"p\", null, \"Loading...\");\n\n//   if (error) return <p>Error: {error.message}</p>;\n\n//   return (\n//     <div>\n//       <h1>Users</h1>\n//       <ul>\n//         {data.usaMapData.map((user) => (\n//           <li key={user.id}>\n//             <p>Name: {user.name}</p>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// function Root() {\n//   return (\n//     <ApolloProvider client={client}>\n//       <CApp />\n//     </ApolloProvider>\n//   );\n// }\n\n// export default Root;","map":{"version":3,"names":["React","ApolloProvider","ApolloClient","InMemoryCache","App","client","uri","cache","CApp","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/hummarabashir/Desktop/national-park/frontend/src/index.js"],"sourcesContent":["// import React from \"react\";\n// import ReactDOM from \"react-dom\";\n// import { ApolloProvider } from \"@apollo/client\";\n// import { ApolloClient, InMemoryCache } from \"@apollo/client\";\n// import \"typeface-roboto\";\n// import App from \"./App\";\n\n// const client = new ApolloClient({ uri: \"http://localhost:4000\" });\n\n// ReactDOM.render(\n//   <ApolloProvider client={client}>\n//     <App />\n//   </ApolloProvider>,\n\n//   document.getElementById(\"root\")\n// );\n\n// function ClientApp() {\n//   return (\n//     <ApolloProvider client={client}>\n//       <App />\n//     </ApolloProvider>\n//   );\n// }\n\n// export default ClientApp;\n\nimport React from \"react\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport { ApolloClient, InMemoryCache } from \"@apollo/client\";\nimport App from \"./App.js\";\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000/graphql\",\n  cache: new InMemoryCache(),\n});\n\nconst CApp = () => {\n  return (\n    <ApolloProvider client={client}>\n      <h1>hello</h1>\n    </ApolloProvider>\n  );\n};\n\nexport default CApp;\n\n// npm install @apollo/client\n// npm start\n\n// import React from \"react\";\n// import {\n//   ApolloClient,\n//   InMemoryCache,\n//   ApolloProvider,\n//   useQuery,\n//   gql,\n// } from \"@apollo/client\";\n\n// const client = new ApolloClient({\n//   uri: \"http://localhost:4000/graphql\", // Replace with your GraphQL server URL\n//   cache: new InMemoryCache(),\n// });\n\n// const GET_STATE_DATA = gql`\n//   query GetStateData {\n//     usaMapData {\n//       id\n//       name\n//     }\n//   }\n// `;\n\n// function CApp() {\n//   const { loading, error, data } = useQuery(GET_STATE_DATA);\n\n//   if (loading) return React.createElement(\"p\", null, \"Loading...\");\n\n//   if (error) return <p>Error: {error.message}</p>;\n\n//   return (\n//     <div>\n//       <h1>Users</h1>\n//       <ul>\n//         {data.usaMapData.map((user) => (\n//           <li key={user.id}>\n//             <p>Name: {user.name}</p>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// function Root() {\n//   return (\n//     <ApolloProvider client={client}>\n//       <CApp />\n//     </ApolloProvider>\n//   );\n// }\n\n// export default Root;\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,cAAc,QAAQ,gBAAgB;AAC/C,SAASC,YAAY,EAAEC,aAAa,QAAQ,gBAAgB;AAC5D,OAAOC,GAAG,MAAM,UAAU;AAE1B,MAAMC,MAAM,GAAG,IAAIH,YAAY,CAAC;EAC9BI,GAAG,EAAE,+BAA+B;EACpCC,KAAK,EAAE,IAAIJ,aAAa,CAAC;AAC3B,CAAC,CAAC;AAEF,MAAMK,IAAI,GAAGA,CAAA,KAAM;EACjB,oBACER,KAAA,CAAAS,aAAA,CAACR,cAAc;IAACI,MAAM,EAAEA,MAAO;IAAAK,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC7Bf,KAAA,CAAAS,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAI,OAAS,CACC,CAAC;AAErB,CAAC;AAED,eAAeP,IAAI;;AAEnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module"}