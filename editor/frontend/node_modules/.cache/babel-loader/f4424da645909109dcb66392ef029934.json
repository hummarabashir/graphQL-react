{"ast":null,"code":"var _jsxFileName = \"/Users/hummarabashir/Desktop/national-park/editor/frontend/src/StateInfo.js\";\nimport React, { useState } from \"react\";\nimport { useQuery } from \"react-apollo-hooks\";\nimport gql from \"graphql-tag\";\nimport { Link } from \"react-router-dom\";\nimport \"./index.css\";\n\n// const client = new ApolloClient({ uri: \"http://localhost:4000\" });\n\nconst GET_STATE_DATA = gql`\n  query GetStateData($stateCode: String!) {\n    usaMapData(stateCode: $stateCode) {\n      id\n      name\n      stateCode\n    }\n  }\n`;\n\n// const App = () => {\n//   return (\n//     <Router>\n//       <Routes>\n//         <Route path=\"/\" element={<Landing />} />\n//         <Route path=\"/state\" element={<stateInfo />} />\n//       </Routes>\n//     </Router>\n//   );\n// };\n\nconst StateInfo = () => {\n  const [selectedState, setSelectedState] = useState(\"\");\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_STATE_DATA, {\n    variables: {\n      stateCode: selectedState\n    }\n  });\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }\n  }, \"Error: \", error.message);\n  if (data && data.usaMapData) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"landing-page-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }\n    }, \"STATE INFORMATION\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      key: data.usaMapData.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }\n    }, \"StateName: \", data.usaMapData.name), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }\n    }, \"StateCode: \", data.usaMapData.stateCode))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header-link-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/\",\n      className: \"header-link\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }\n    }, \"Back to State Selector\")));\n  }\n};\nexport default StateInfo;","map":{"version":3,"names":["React","useState","useQuery","gql","Link","GET_STATE_DATA","StateInfo","selectedState","setSelectedState","loading","error","data","variables","stateCode","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","message","usaMapData","className","key","id","name","to"],"sources":["/Users/hummarabashir/Desktop/national-park/editor/frontend/src/StateInfo.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useQuery } from \"react-apollo-hooks\";\nimport gql from \"graphql-tag\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./index.css\";\n\n// const client = new ApolloClient({ uri: \"http://localhost:4000\" });\n\nconst GET_STATE_DATA = gql`\n  query GetStateData($stateCode: String!) {\n    usaMapData(stateCode: $stateCode) {\n      id\n      name\n      stateCode\n    }\n  }\n`;\n\n// const App = () => {\n//   return (\n//     <Router>\n//       <Routes>\n//         <Route path=\"/\" element={<Landing />} />\n//         <Route path=\"/state\" element={<stateInfo />} />\n//       </Routes>\n//     </Router>\n//   );\n// };\n\nconst StateInfo = () => {\n  const [selectedState, setSelectedState] = useState(\"\");\n  const { loading, error, data } = useQuery(GET_STATE_DATA, {\n    variables: { stateCode: selectedState },\n  });\n  if (loading) return <p>Loading...</p>;\n\n  if (error) return <p>Error: {error.message}</p>;\n  if (data && data.usaMapData) {\n    return (\n      <div className=\"landing-page-container\">\n        <h1>STATE INFORMATION</h1>\n        <ul>\n          <li key={data.usaMapData.id}>\n            <p>StateName: {data.usaMapData.name}</p>\n            <p>StateCode: {data.usaMapData.stateCode}</p>\n          </li>\n        </ul>\n        <div className=\"header-link-container\">\n          <Link to=\"/\" className=\"header-link\">\n            Back to State Selector\n          </Link>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default StateInfo;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,OAAOC,GAAG,MAAM,aAAa;AAC7B,SAASC,IAAI,QAAQ,kBAAkB;AAEvC,OAAO,aAAa;;AAEpB;;AAEA,MAAMC,cAAc,GAAGF,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMG,SAAS,GAAGA,CAAA,KAAM;EACtB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM;IAAEQ,OAAO;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAGT,QAAQ,CAACG,cAAc,EAAE;IACxDO,SAAS,EAAE;MAAEC,SAAS,EAAEN;IAAc;EACxC,CAAC,CAAC;EACF,IAAIE,OAAO,EAAE,oBAAOT,KAAA,CAAAc,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAG,YAAa,CAAC;EAErC,IAAIV,KAAK,EAAE,oBAAOV,KAAA,CAAAc,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAG,SAAO,EAACV,KAAK,CAACW,OAAW,CAAC;EAC/C,IAAIV,IAAI,IAAIA,IAAI,CAACW,UAAU,EAAE;IAC3B,oBACEtB,KAAA,CAAAc,aAAA;MAAKS,SAAS,EAAC,wBAAwB;MAAAR,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBACrCpB,KAAA,CAAAc,aAAA;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAI,mBAAqB,CAAC,eAC1BpB,KAAA,CAAAc,aAAA;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBACEpB,KAAA,CAAAc,aAAA;MAAIU,GAAG,EAAEb,IAAI,CAACW,UAAU,CAACG,EAAG;MAAAV,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBAC1BpB,KAAA,CAAAc,aAAA;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAG,aAAW,EAACT,IAAI,CAACW,UAAU,CAACI,IAAQ,CAAC,eACxC1B,KAAA,CAAAc,aAAA;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAG,aAAW,EAACT,IAAI,CAACW,UAAU,CAACT,SAAa,CAC1C,CACF,CAAC,eACLb,KAAA,CAAAc,aAAA;MAAKS,SAAS,EAAC,uBAAuB;MAAAR,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBACpCpB,KAAA,CAAAc,aAAA,CAACV,IAAI;MAACuB,EAAE,EAAC,GAAG;MAACJ,SAAS,EAAC,aAAa;MAAAR,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAC,wBAE/B,CACH,CACF,CAAC;EAEV;AACF,CAAC;AAED,eAAed,SAAS"},"metadata":{},"sourceType":"module"}