{"ast":null,"code":"var _jsxFileName = \"/Users/hummarabashir/Desktop/national-park/editor/frontend/src/index.js\";\n// import React from \"react\";\n// import { ApolloProvider } from \"@apollo/client\";\n// import { ApolloClient, InMemoryCache } from \"@apollo/client\";\n// // import App from \"./App.js\";\n\n// const client = new ApolloClient({\n//   uri: \"http://localhost:4000/graphql\",\n//   cache: new InMemoryCache(),\n// });\n\n// const CApp = () => {\n//   return (\n//     <ApolloProvider client={client}>\n//       <h1>hello</h1>\n//     </ApolloProvider>\n//   );\n// };\n\n// export default CApp;\n\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo-hooks\";\nimport { useQuery } from \"react-apollo-hooks\";\nimport gql from \"graphql-tag\";\nimport USAMap from \"react-usa-map\";\nimport \"./index.css\";\n\n// import App from \"./App.js\";\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000\"\n});\n\n// const GET_STATE_DATA = gql`\n//   query GetStateData {\n//     usaMapData(stateCode: \"AZ\") {\n//       id\n//       name\n//     }\n//   }\n// `;\nconst GET_STATE_DATA = gql`\n  query GetStateData($stateCode: String!) {\n    usaMapData(stateCode: $stateCode) {\n      id\n      name\n      stateCode\n    }\n  }\n`;\n\n// function Map() {\n//   // This function is required by imported USAMap\n//   // mapHandler = (event) => {\n//   // \tlet stateName = event.target.innerHTML\n//   // \t\t.replace(\"<title>\", \"\")\n//   // \t\t.replace(\"</title>\", \"\");\n//   // \tnavigate(\"/parks\", {\n//   // \t\tstate: { stateName: stateName, stateCode: event.target.dataset.name },\n//   // \t});\n//   // };\n//   const mapHandler = (event) => {\n//     // alert(\n//     //   `StateName: ${event.target.innerHTML\n//     //     .replace(\"<title>\", \"\")\n//     //     .replace(\"</title>\", \"\")}\n//     //   StateCode: ${event.target.dataset.name}`\n//     // );\n//     const stateCode = event.target.dataset.name;\n//     setSelectedState(stateCode);\n//   };\n\n//   return (\n//     // This is a imported component that provides a clickable map of the United States\n//     <USAMap onClick={mapHandler} defaultFill=\"rgb(247, 166, 15)\" />\n//   );\n// }\n\nfunction CApp() {\n  const [selectedState, setSelectedState] = useState(\"\");\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_STATE_DATA, {\n    variables: {\n      stateCode: selectedState\n    }\n  });\n  const mapHandler = event => {\n    const stateCode = event.target.dataset.name;\n    setSelectedState(stateCode);\n  };\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }\n  }, \"Error: \", error.message);\n  if (data && data.usaMapData) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"landing-page-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, \"Users\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      key: data.usaMapData.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }, \"Name: \", data.usaMapData.name))));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"landing-page-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(USAMap, {\n      onClick: mapHandler,\n      defaultFill: \"rgb(247, 166, 15)\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }));\n  }\n}\nReactDOM.render( /*#__PURE__*/React.createElement(ApolloProvider, {\n  client: client,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(CApp, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }\n})), document.getElementById(\"root\"));","map":{"version":3,"names":["React","useState","ReactDOM","ApolloClient","ApolloProvider","useQuery","gql","USAMap","client","uri","GET_STATE_DATA","CApp","selectedState","setSelectedState","loading","error","data","variables","stateCode","mapHandler","event","target","dataset","name","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","message","usaMapData","className","key","id","onClick","defaultFill","render","document","getElementById"],"sources":["/Users/hummarabashir/Desktop/national-park/editor/frontend/src/index.js"],"sourcesContent":["// import React from \"react\";\n// import { ApolloProvider } from \"@apollo/client\";\n// import { ApolloClient, InMemoryCache } from \"@apollo/client\";\n// // import App from \"./App.js\";\n\n// const client = new ApolloClient({\n//   uri: \"http://localhost:4000/graphql\",\n//   cache: new InMemoryCache(),\n// });\n\n// const CApp = () => {\n//   return (\n//     <ApolloProvider client={client}>\n//       <h1>hello</h1>\n//     </ApolloProvider>\n//   );\n// };\n\n// export default CApp;\n\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo-hooks\";\nimport { useQuery } from \"react-apollo-hooks\";\nimport gql from \"graphql-tag\";\nimport USAMap from \"react-usa-map\";\nimport \"./index.css\";\n\n// import App from \"./App.js\";\n\nconst client = new ApolloClient({ uri: \"http://localhost:4000\" });\n\n// const GET_STATE_DATA = gql`\n//   query GetStateData {\n//     usaMapData(stateCode: \"AZ\") {\n//       id\n//       name\n//     }\n//   }\n// `;\nconst GET_STATE_DATA = gql`\n  query GetStateData($stateCode: String!) {\n    usaMapData(stateCode: $stateCode) {\n      id\n      name\n      stateCode\n    }\n  }\n`;\n\n// function Map() {\n//   // This function is required by imported USAMap\n//   // mapHandler = (event) => {\n//   // \tlet stateName = event.target.innerHTML\n//   // \t\t.replace(\"<title>\", \"\")\n//   // \t\t.replace(\"</title>\", \"\");\n//   // \tnavigate(\"/parks\", {\n//   // \t\tstate: { stateName: stateName, stateCode: event.target.dataset.name },\n//   // \t});\n//   // };\n//   const mapHandler = (event) => {\n//     // alert(\n//     //   `StateName: ${event.target.innerHTML\n//     //     .replace(\"<title>\", \"\")\n//     //     .replace(\"</title>\", \"\")}\n//     //   StateCode: ${event.target.dataset.name}`\n//     // );\n//     const stateCode = event.target.dataset.name;\n//     setSelectedState(stateCode);\n//   };\n\n//   return (\n//     // This is a imported component that provides a clickable map of the United States\n//     <USAMap onClick={mapHandler} defaultFill=\"rgb(247, 166, 15)\" />\n//   );\n// }\n\nfunction CApp() {\n  const [selectedState, setSelectedState] = useState(\"\");\n  const { loading, error, data } = useQuery(GET_STATE_DATA, {\n    variables: { stateCode: selectedState },\n  });\n  const mapHandler = (event) => {\n    const stateCode = event.target.dataset.name;\n    setSelectedState(stateCode);\n  };\n\n  if (loading) return <p>Loading...</p>;\n\n  if (error) return <p>Error: {error.message}</p>;\n  if (data && data.usaMapData) {\n    return (\n      <div className=\"landing-page-container\">\n        <h1>Users</h1>\n        <ul>\n          {/* {data.usaMapData.map((user) => ( */}\n          <li key={data.usaMapData.id}>\n            <p>Name: {data.usaMapData.name}</p>\n          </li>\n          {/* ))} */}\n        </ul>\n        {/* <USAMap onClick={mapHandler} defaultFill=\"rgb(247, 166, 15)\" /> */}\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"landing-page-container\">\n        <USAMap onClick={mapHandler} defaultFill=\"rgb(247, 166, 15)\" />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <CApp />\n  </ApolloProvider>,\n\n  document.getElementById(\"root\")\n);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}